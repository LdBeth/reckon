/**
 *
 * Copyright (c) 2010-2015 Voidware Ltd.  All Rights Reserved.
 *
 * This file contains Original Code and/or Modifications of Original Code as
 * defined in and that are subject to the Voidware Public Source Licence version
 * 1.0 (the 'Licence'). You may not use this file except in compliance with the
 * Licence or with expressly written permission from Voidware.  Please obtain a
 * copy of the Licence at http://www.voidware.com/legal/vpsl1.txt and read it
 * before using this file.
 * 
 * The Original Code and all software distributed under the Licence are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, AND VOIDWARE HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING
 * WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 *
 * Please see the Licence for the specific language governing rights and 
 * limitations under the Licence.
 *
 * contact@voidware.com
 */

#include <math.h>
#include "misc.h"
#include "primitiv.h"   
#include "model.h"
#include "matrix.h"
#include "os.h"

// 8k
static const short SinTable[TABLE_SIZE] = 
{
    0, 
    25, 50, 75, 100, 125, 150, 175, 201, 226, 251, 
    276, 301, 326, 351, 376, 402, 427, 452, 477, 502, 
    527, 552, 577, 603, 628, 653, 678, 703, 728, 753, 
    778, 803, 829, 854, 879, 904, 929, 954, 979, 1004, 
    1029, 1054, 1079, 1105, 1130, 1155, 1180, 1205, 1230, 1255, 
    1280, 1305, 1330, 1355, 1380, 1405, 1430, 1455, 1480, 1505, 
    1530, 1555, 1580, 1605, 1630, 1655, 1680, 1705, 1730, 1755, 
    1780, 1805, 1830, 1855, 1880, 1905, 1930, 1955, 1980, 2005, 
    2030, 2055, 2080, 2105, 2130, 2155, 2180, 2204, 2229, 2254, 
    2279, 2304, 2329, 2354, 2379, 2404, 2428, 2453, 2478, 2503, 
    2528, 2553, 2577, 2602, 2627, 2652, 2677, 2701, 2726, 2751, 
    2776, 2801, 2825, 2850, 2875, 2900, 2924, 2949, 2974, 2998, 
    3023, 3048, 3073, 3097, 3122, 3147, 3171, 3196, 3221, 3245, 
    3270, 3294, 3319, 3344, 3368, 3393, 3417, 3442, 3467, 3491, 
    3516, 3540, 3565, 3589, 3614, 3638, 3663, 3687, 3712, 3736, 
    3761, 3785, 3810, 3834, 3858, 3883, 3907, 3932, 3956, 3980, 
    4005, 4029, 4054, 4078, 4102, 4127, 4151, 4175, 4200, 4224, 
    4248, 4272, 4297, 4321, 4345, 4369, 4394, 4418, 4442, 4466, 
    4490, 4514, 4539, 4563, 4587, 4611, 4635, 4659, 4683, 4707, 
    4731, 4756, 4780, 4804, 4828, 4852, 4876, 4900, 4924, 4948, 
    4972, 4995, 5019, 5043, 5067, 5091, 5115, 5139, 5163, 5187, 
    5210, 5234, 5258, 5282, 5306, 5329, 5353, 5377, 5401, 5424, 
    5448, 5472, 5495, 5519, 5543, 5566, 5590, 5614, 5637, 5661, 
    5684, 5708, 5732, 5755, 5779, 5802, 5826, 5849, 5873, 5896, 
    5919, 5943, 5966, 5990, 6013, 6036, 6060, 6083, 6106, 6130, 
    6153, 6176, 6200, 6223, 6246, 6269, 6293, 6316, 6339, 6362, 
    6385, 6408, 6432, 6455, 6478, 6501, 6524, 6547, 6570, 6593, 
    6616, 6639, 6662, 6685, 6708, 6731, 6754, 6777, 6799, 6822, 
    6845, 6868, 6891, 6914, 6936, 6959, 6982, 7005, 7027, 7050, 
    7073, 7095, 7118, 7141, 7163, 7186, 7208, 7231, 7253, 7276, 
    7299, 7321, 7343, 7366, 7388, 7411, 7433, 7456, 7478, 7500, 
    7523, 7545, 7567, 7590, 7612, 7634, 7656, 7678, 7701, 7723, 
    7745, 7767, 7789, 7811, 7833, 7856, 7878, 7900, 7922, 7944, 
    7966, 7988, 8009, 8031, 8053, 8075, 8097, 8119, 8141, 8162, 
    8184, 8206, 8228, 8249, 8271, 8293, 8315, 8336, 8358, 8379, 
    8401, 8423, 8444, 8466, 8487, 8509, 8530, 8552, 8573, 8594, 
    8616, 8637, 8658, 8680, 8701, 8722, 8744, 8765, 8786, 8807, 
    8829, 8850, 8871, 8892, 8913, 8934, 8955, 8976, 8997, 9018, 
    9039, 9060, 9081, 9102, 9123, 9144, 9165, 9185, 9206, 9227, 
    9248, 9268, 9289, 9310, 9331, 9351, 9372, 9392, 9413, 9434, 
    9454, 9475, 9495, 9516, 9536, 9556, 9577, 9597, 9618, 9638, 
    9658, 9679, 9699, 9719, 9739, 9759, 9780, 9800, 9820, 9840, 
    9860, 9880, 9900, 9920, 9940, 9960, 9980, 10000, 10020, 10040, 
    10060, 10079, 10099, 10119, 10139, 10159, 10178, 10198, 10218, 10237, 
    10257, 10276, 10296, 10315, 10335, 10354, 10374, 10393, 10413, 10432, 
    10452, 10471, 10490, 10510, 10529, 10548, 10567, 10586, 10606, 10625, 
    10644, 10663, 10682, 10701, 10720, 10739, 10758, 10777, 10796, 10815, 
    10834, 10853, 10871, 10890, 10909, 10928, 10946, 10965, 10984, 11002, 
    11021, 11040, 11058, 11077, 11095, 11114, 11132, 11150, 11169, 11187, 
    11206, 11224, 11242, 11260, 11279, 11297, 11315, 11333, 11351, 11370, 
    11388, 11406, 11424, 11442, 11460, 11478, 11496, 11513, 11531, 11549, 
    11567, 11585, 11602, 11620, 11638, 11656, 11673, 11691, 11708, 11726, 
    11744, 11761, 11779, 11796, 11813, 11831, 11848, 11866, 11883, 11900, 
    11917, 11935, 11952, 11969, 11986, 12003, 12020, 12037, 12054, 12072, 
    12088, 12105, 12122, 12139, 12156, 12173, 12190, 12207, 12223, 12240, 
    12257, 12273, 12290, 12307, 12323, 12340, 12356, 12373, 12389, 12406, 
    12422, 12438, 12455, 12471, 12487, 12504, 12520, 12536, 12552, 12568, 
    12584, 12600, 12617, 12633, 12649, 12665, 12680, 12696, 12712, 12728, 
    12744, 12760, 12775, 12791, 12807, 12822, 12838, 12854, 12869, 12885, 
    12900, 12916, 12931, 12947, 12962, 12977, 12993, 13008, 13023, 13038, 
    13054, 13069, 13084, 13099, 13114, 13129, 13144, 13159, 13174, 13189, 
    13204, 13219, 13234, 13249, 13263, 13278, 13293, 13307, 13322, 13337, 
    13351, 13366, 13380, 13395, 13409, 13424, 13438, 13452, 13467, 13481, 
    13495, 13510, 13524, 13538, 13552, 13566, 13580, 13594, 13608, 13622, 
    13636, 13650, 13664, 13678, 13692, 13705, 13719, 13733, 13747, 13760, 
    13774, 13788, 13801, 13815, 13828, 13842, 13855, 13868, 13882, 13895, 
    13908, 13922, 13935, 13948, 13961, 13974, 13988, 14001, 14014, 14027, 
    14040, 14053, 14065, 14078, 14091, 14104, 14117, 14129, 14142, 14155, 
    14167, 14180, 14193, 14205, 14218, 14230, 14243, 14255, 14267, 14280, 
    14292, 14304, 14317, 14329, 14341, 14353, 14365, 14377, 14389, 14401, 
    14413, 14425, 14437, 14449, 14461, 14473, 14484, 14496, 14508, 14519, 
    14531, 14543, 14554, 14566, 14577, 14589, 14600, 14611, 14623, 14634, 
    14645, 14657, 14668, 14679, 14690, 14701, 14712, 14723, 14734, 14745, 
    14756, 14767, 14778, 14789, 14800, 14810, 14821, 14832, 14843, 14853, 
    14864, 14874, 14885, 14895, 14906, 14916, 14927, 14937, 14947, 14957, 
    14968, 14978, 14988, 14998, 15008, 15018, 15028, 15038, 15048, 15058, 
    15068, 15078, 15088, 15098, 15107, 15117, 15127, 15136, 15146, 15156, 
    15165, 15175, 15184, 15193, 15203, 15212, 15221, 15231, 15240, 15249, 
    15258, 15267, 15277, 15286, 15295, 15304, 15313, 15322, 15330, 15339, 
    15348, 15357, 15366, 15374, 15383, 15392, 15400, 15409, 15417, 15426, 
    15434, 15443, 15451, 15459, 15468, 15476, 15484, 15492, 15500, 15509, 
    15517, 15525, 15533, 15541, 15549, 15557, 15564, 15572, 15580, 15588, 
    15596, 15603, 15611, 15618, 15626, 15634, 15641, 15649, 15656, 15663, 
    15671, 15678, 15685, 15693, 15700, 15707, 15714, 15721, 15728, 15735, 
    15742, 15749, 15756, 15763, 15770, 15777, 15783, 15790, 15797, 15803, 
    15810, 15817, 15823, 15830, 15836, 15842, 15849, 15855, 15861, 15868, 
    15874, 15880, 15886, 15892, 15899, 15905, 15911, 15917, 15923, 15928, 
    15934, 15940, 15946, 15952, 15957, 15963, 15969, 15974, 15980, 15985, 
    15991, 15996, 16002, 16007, 16012, 16018, 16023, 16028, 16033, 16039, 
    16044, 16049, 16054, 16059, 16064, 16069, 16074, 16078, 16083, 16088, 
    16093, 16097, 16102, 16107, 16111, 16116, 16120, 16125, 16129, 16134, 
    16138, 16142, 16147, 16151, 16155, 16159, 16163, 16167, 16171, 16175, 
    16179, 16183, 16187, 16191, 16195, 16199, 16202, 16206, 16210, 16213, 
    16217, 16221, 16224, 16228, 16231, 16234, 16238, 16241, 16244, 16248, 
    16251, 16254, 16257, 16260, 16263, 16266, 16269, 16272, 16275, 16278, 
    16281, 16284, 16286, 16289, 16292, 16294, 16297, 16300, 16302, 16305, 
    16307, 16309, 16312, 16314, 16316, 16319, 16321, 16323, 16325, 16327, 
    16329, 16331, 16333, 16335, 16337, 16339, 16341, 16343, 16344, 16346, 
    16348, 16350, 16351, 16353, 16354, 16356, 16357, 16359, 16360, 16361, 
    16363, 16364, 16365, 16366, 16367, 16368, 16369, 16370, 16371, 16372, 
    16373, 16374, 16375, 16376, 16377, 16377, 16378, 16379, 16379, 16380, 
    16380, 16381, 16381, 16382, 16382, 16382, 16383, 16383, 16383, 16383, 
    16383, 16383, 16383, 16384, 16383, 16383, 16383, 16383, 16383, 16383, 
    16383, 16382, 16382, 16382, 16381, 16381, 16380, 16380, 16379, 16379, 
    16378, 16377, 16377, 16376, 16375, 16374, 16373, 16372, 16371, 16370, 
    16369, 16368, 16367, 16366, 16365, 16364, 16363, 16361, 16360, 16359, 
    16357, 16356, 16354, 16353, 16351, 16350, 16348, 16346, 16344, 16343, 
    16341, 16339, 16337, 16335, 16333, 16331, 16329, 16327, 16325, 16323, 
    16321, 16319, 16316, 16314, 16312, 16309, 16307, 16305, 16302, 16300, 
    16297, 16294, 16292, 16289, 16286, 16284, 16281, 16278, 16275, 16272, 
    16269, 16266, 16263, 16260, 16257, 16254, 16251, 16248, 16244, 16241, 
    16238, 16234, 16231, 16228, 16224, 16221, 16217, 16213, 16210, 16206, 
    16202, 16199, 16195, 16191, 16187, 16183, 16179, 16175, 16171, 16167, 
    16163, 16159, 16155, 16151, 16147, 16142, 16138, 16134, 16129, 16125, 
    16120, 16116, 16111, 16107, 16102, 16097, 16093, 16088, 16083, 16078, 
    16074, 16069, 16064, 16059, 16054, 16049, 16044, 16039, 16033, 16028, 
    16023, 16018, 16012, 16007, 16002, 15996, 15991, 15985, 15980, 15974, 
    15969, 15963, 15957, 15952, 15946, 15940, 15934, 15928, 15923, 15917, 
    15911, 15905, 15899, 15892, 15886, 15880, 15874, 15868, 15861, 15855, 
    15849, 15842, 15836, 15830, 15823, 15817, 15810, 15803, 15797, 15790, 
    15783, 15777, 15770, 15763, 15756, 15749, 15742, 15735, 15728, 15721, 
    15714, 15707, 15700, 15693, 15685, 15678, 15671, 15663, 15656, 15649, 
    15641, 15634, 15626, 15618, 15611, 15603, 15596, 15588, 15580, 15572, 
    15564, 15557, 15549, 15541, 15533, 15525, 15517, 15509, 15500, 15492, 
    15484, 15476, 15468, 15459, 15451, 15443, 15434, 15426, 15417, 15409, 
    15400, 15392, 15383, 15374, 15366, 15357, 15348, 15339, 15330, 15322, 
    15313, 15304, 15295, 15286, 15277, 15267, 15258, 15249, 15240, 15231, 
    15221, 15212, 15203, 15193, 15184, 15175, 15165, 15156, 15146, 15136, 
    15127, 15117, 15107, 15098, 15088, 15078, 15068, 15058, 15048, 15038, 
    15028, 15018, 15008, 14998, 14988, 14978, 14968, 14957, 14947, 14937, 
    14927, 14916, 14906, 14895, 14885, 14874, 14864, 14853, 14843, 14832, 
    14821, 14810, 14800, 14789, 14778, 14767, 14756, 14745, 14734, 14723, 
    14712, 14701, 14690, 14679, 14668, 14657, 14645, 14634, 14623, 14611, 
    14600, 14589, 14577, 14566, 14554, 14543, 14531, 14519, 14508, 14496, 
    14484, 14473, 14461, 14449, 14437, 14425, 14413, 14401, 14389, 14377, 
    14365, 14353, 14341, 14329, 14317, 14304, 14292, 14280, 14267, 14255, 
    14243, 14230, 14218, 14205, 14193, 14180, 14167, 14155, 14142, 14129, 
    14117, 14104, 14091, 14078, 14065, 14053, 14040, 14027, 14014, 14001, 
    13988, 13974, 13961, 13948, 13935, 13922, 13908, 13895, 13882, 13868, 
    13855, 13842, 13828, 13815, 13801, 13788, 13774, 13760, 13747, 13733, 
    13719, 13705, 13692, 13678, 13664, 13650, 13636, 13622, 13608, 13594, 
    13580, 13566, 13552, 13538, 13524, 13510, 13495, 13481, 13467, 13452, 
    13438, 13424, 13409, 13395, 13380, 13366, 13351, 13337, 13322, 13307, 
    13293, 13278, 13263, 13249, 13234, 13219, 13204, 13189, 13174, 13159, 
    13144, 13129, 13114, 13099, 13084, 13069, 13054, 13038, 13023, 13008, 
    12993, 12977, 12962, 12947, 12931, 12916, 12900, 12885, 12869, 12854, 
    12838, 12822, 12807, 12791, 12775, 12760, 12744, 12728, 12712, 12696, 
    12680, 12665, 12649, 12633, 12617, 12600, 12584, 12568, 12552, 12536, 
    12520, 12504, 12487, 12471, 12455, 12438, 12422, 12406, 12389, 12373, 
    12356, 12340, 12323, 12307, 12290, 12273, 12257, 12240, 12223, 12207, 
    12190, 12173, 12156, 12139, 12122, 12105, 12088, 12072, 12054, 12037, 
    12020, 12003, 11986, 11969, 11952, 11935, 11917, 11900, 11883, 11866, 
    11848, 11831, 11813, 11796, 11779, 11761, 11744, 11726, 11708, 11691, 
    11673, 11656, 11638, 11620, 11602, 11585, 11567, 11549, 11531, 11513, 
    11496, 11478, 11460, 11442, 11424, 11406, 11388, 11370, 11351, 11333, 
    11315, 11297, 11279, 11260, 11242, 11224, 11206, 11187, 11169, 11150, 
    11132, 11114, 11095, 11077, 11058, 11040, 11021, 11002, 10984, 10965, 
    10946, 10928, 10909, 10890, 10871, 10853, 10834, 10815, 10796, 10777, 
    10758, 10739, 10720, 10701, 10682, 10663, 10644, 10625, 10606, 10586, 
    10567, 10548, 10529, 10510, 10490, 10471, 10452, 10432, 10413, 10393, 
    10374, 10354, 10335, 10315, 10296, 10276, 10257, 10237, 10218, 10198, 
    10178, 10159, 10139, 10119, 10099, 10079, 10060, 10040, 10020, 10000, 
    9980, 9960, 9940, 9920, 9900, 9880, 9860, 9840, 9820, 9800, 
    9780, 9759, 9739, 9719, 9699, 9679, 9658, 9638, 9618, 9597, 
    9577, 9556, 9536, 9516, 9495, 9475, 9454, 9434, 9413, 9392, 
    9372, 9351, 9331, 9310, 9289, 9268, 9248, 9227, 9206, 9185, 
    9165, 9144, 9123, 9102, 9081, 9060, 9039, 9018, 8997, 8976, 
    8955, 8934, 8913, 8892, 8871, 8850, 8829, 8807, 8786, 8765, 
    8744, 8722, 8701, 8680, 8658, 8637, 8616, 8594, 8573, 8552, 
    8530, 8509, 8487, 8466, 8444, 8423, 8401, 8379, 8358, 8336, 
    8315, 8293, 8271, 8249, 8228, 8206, 8184, 8162, 8141, 8119, 
    8097, 8075, 8053, 8031, 8009, 7988, 7966, 7944, 7922, 7900, 
    7878, 7856, 7833, 7811, 7789, 7767, 7745, 7723, 7701, 7678, 
    7656, 7634, 7612, 7590, 7567, 7545, 7523, 7500, 7478, 7456, 
    7433, 7411, 7388, 7366, 7343, 7321, 7299, 7276, 7253, 7231, 
    7208, 7186, 7163, 7141, 7118, 7095, 7073, 7050, 7027, 7005, 
    6982, 6959, 6936, 6914, 6891, 6868, 6845, 6822, 6799, 6777, 
    6754, 6731, 6708, 6685, 6662, 6639, 6616, 6593, 6570, 6547, 
    6524, 6501, 6478, 6455, 6432, 6408, 6385, 6362, 6339, 6316, 
    6293, 6269, 6246, 6223, 6200, 6176, 6153, 6130, 6106, 6083, 
    6060, 6036, 6013, 5990, 5966, 5943, 5919, 5896, 5873, 5849, 
    5826, 5802, 5779, 5755, 5732, 5708, 5684, 5661, 5637, 5614, 
    5590, 5566, 5543, 5519, 5495, 5472, 5448, 5424, 5401, 5377, 
    5353, 5329, 5306, 5282, 5258, 5234, 5210, 5187, 5163, 5139, 
    5115, 5091, 5067, 5043, 5019, 4995, 4972, 4948, 4924, 4900, 
    4876, 4852, 4828, 4804, 4780, 4756, 4731, 4707, 4683, 4659, 
    4635, 4611, 4587, 4563, 4539, 4514, 4490, 4466, 4442, 4418, 
    4394, 4369, 4345, 4321, 4297, 4272, 4248, 4224, 4200, 4175, 
    4151, 4127, 4102, 4078, 4054, 4029, 4005, 3980, 3956, 3932, 
    3907, 3883, 3858, 3834, 3810, 3785, 3761, 3736, 3712, 3687, 
    3663, 3638, 3614, 3589, 3565, 3540, 3516, 3491, 3467, 3442, 
    3417, 3393, 3368, 3344, 3319, 3294, 3270, 3245, 3221, 3196, 
    3171, 3147, 3122, 3097, 3073, 3048, 3023, 2998, 2974, 2949, 
    2924, 2900, 2875, 2850, 2825, 2801, 2776, 2751, 2726, 2701, 
    2677, 2652, 2627, 2602, 2577, 2553, 2528, 2503, 2478, 2453, 
    2428, 2404, 2379, 2354, 2329, 2304, 2279, 2254, 2229, 2204, 
    2180, 2155, 2130, 2105, 2080, 2055, 2030, 2005, 1980, 1955, 
    1930, 1905, 1880, 1855, 1830, 1805, 1780, 1755, 1730, 1705, 
    1680, 1655, 1630, 1605, 1580, 1555, 1530, 1505, 1480, 1455, 
    1430, 1405, 1380, 1355, 1330, 1305, 1280, 1255, 1230, 1205, 
    1180, 1155, 1130, 1105, 1079, 1054, 1029, 1004, 979, 954, 
    929, 904, 879, 854, 829, 803, 778, 753, 728, 703, 
    678, 653, 628, 603, 577, 552, 527, 502, 477, 452, 
    427, 402, 376, 351, 326, 301, 276, 251, 226, 201, 
    175, 150, 125, 100, 75, 50, 25, 0, -25, -50, 
    -75, -100, -125, -150, -175, -201, -226, -251, -276, -301, 
    -326, -351, -376, -402, -427, -452, -477, -502, -527, -552, 
    -577, -603, -628, -653, -678, -703, -728, -753, -778, -803, 
    -829, -854, -879, -904, -929, -954, -979, -1004, -1029, -1054, 
    -1079, -1105, -1130, -1155, -1180, -1205, -1230, -1255, -1280, -1305, 
    -1330, -1355, -1380, -1405, -1430, -1455, -1480, -1505, -1530, -1555, 
    -1580, -1605, -1630, -1655, -1680, -1705, -1730, -1755, -1780, -1805, 
    -1830, -1855, -1880, -1905, -1930, -1955, -1980, -2005, -2030, -2055, 
    -2080, -2105, -2130, -2155, -2180, -2204, -2229, -2254, -2279, -2304, 
    -2329, -2354, -2379, -2404, -2428, -2453, -2478, -2503, -2528, -2553, 
    -2577, -2602, -2627, -2652, -2677, -2701, -2726, -2751, -2776, -2801, 
    -2825, -2850, -2875, -2900, -2924, -2949, -2974, -2998, -3023, -3048, 
    -3073, -3097, -3122, -3147, -3171, -3196, -3221, -3245, -3270, -3294, 
    -3319, -3344, -3368, -3393, -3417, -3442, -3467, -3491, -3516, -3540, 
    -3565, -3589, -3614, -3638, -3663, -3687, -3712, -3736, -3761, -3785, 
    -3810, -3834, -3858, -3883, -3907, -3932, -3956, -3980, -4005, -4029, 
    -4054, -4078, -4102, -4127, -4151, -4175, -4200, -4224, -4248, -4272, 
    -4297, -4321, -4345, -4369, -4394, -4418, -4442, -4466, -4490, -4514, 
    -4539, -4563, -4587, -4611, -4635, -4659, -4683, -4707, -4731, -4756, 
    -4780, -4804, -4828, -4852, -4876, -4900, -4924, -4948, -4972, -4995, 
    -5019, -5043, -5067, -5091, -5115, -5139, -5163, -5187, -5210, -5234, 
    -5258, -5282, -5306, -5329, -5353, -5377, -5401, -5424, -5448, -5472, 
    -5495, -5519, -5543, -5566, -5590, -5614, -5637, -5661, -5684, -5708, 
    -5732, -5755, -5779, -5802, -5826, -5849, -5873, -5896, -5919, -5943, 
    -5966, -5990, -6013, -6036, -6060, -6083, -6106, -6130, -6153, -6176, 
    -6200, -6223, -6246, -6269, -6293, -6316, -6339, -6362, -6385, -6408, 
    -6432, -6455, -6478, -6501, -6524, -6547, -6570, -6593, -6616, -6639, 
    -6662, -6685, -6708, -6731, -6754, -6777, -6799, -6822, -6845, -6868, 
    -6891, -6914, -6936, -6959, -6982, -7005, -7027, -7050, -7073, -7095, 
    -7118, -7141, -7163, -7186, -7208, -7231, -7253, -7276, -7299, -7321, 
    -7343, -7366, -7388, -7411, -7433, -7456, -7478, -7500, -7523, -7545, 
    -7567, -7590, -7612, -7634, -7656, -7678, -7701, -7723, -7745, -7767, 
    -7789, -7811, -7833, -7856, -7878, -7900, -7922, -7944, -7966, -7988, 
    -8009, -8031, -8053, -8075, -8097, -8119, -8141, -8162, -8184, -8206, 
    -8228, -8249, -8271, -8293, -8315, -8336, -8358, -8379, -8401, -8423, 
    -8444, -8466, -8487, -8509, -8530, -8552, -8573, -8594, -8616, -8637, 
    -8658, -8680, -8701, -8722, -8744, -8765, -8786, -8807, -8829, -8850, 
    -8871, -8892, -8913, -8934, -8955, -8976, -8997, -9018, -9039, -9060, 
    -9081, -9102, -9123, -9144, -9165, -9185, -9206, -9227, -9248, -9268, 
    -9289, -9310, -9331, -9351, -9372, -9392, -9413, -9434, -9454, -9475, 
    -9495, -9516, -9536, -9556, -9577, -9597, -9618, -9638, -9658, -9679, 
    -9699, -9719, -9739, -9759, -9780, -9800, -9820, -9840, -9860, -9880, 
    -9900, -9920, -9940, -9960, -9980, -10000, -10020, -10040, -10060, -10079, 
    -10099, -10119, -10139, -10159, -10178, -10198, -10218, -10237, -10257, -10276, 
    -10296, -10315, -10335, -10354, -10374, -10393, -10413, -10432, -10452, -10471, 
    -10490, -10510, -10529, -10548, -10567, -10586, -10606, -10625, -10644, -10663, 
    -10682, -10701, -10720, -10739, -10758, -10777, -10796, -10815, -10834, -10853, 
    -10871, -10890, -10909, -10928, -10946, -10965, -10984, -11002, -11021, -11040, 
    -11058, -11077, -11095, -11114, -11132, -11150, -11169, -11187, -11206, -11224, 
    -11242, -11260, -11279, -11297, -11315, -11333, -11351, -11370, -11388, -11406, 
    -11424, -11442, -11460, -11478, -11496, -11513, -11531, -11549, -11567, -11585, 
    -11602, -11620, -11638, -11656, -11673, -11691, -11708, -11726, -11744, -11761, 
    -11779, -11796, -11813, -11831, -11848, -11866, -11883, -11900, -11917, -11935, 
    -11952, -11969, -11986, -12003, -12020, -12037, -12054, -12072, -12088, -12105, 
    -12122, -12139, -12156, -12173, -12190, -12207, -12223, -12240, -12257, -12273, 
    -12290, -12307, -12323, -12340, -12356, -12373, -12389, -12406, -12422, -12438, 
    -12455, -12471, -12487, -12504, -12520, -12536, -12552, -12568, -12584, -12600, 
    -12617, -12633, -12649, -12665, -12680, -12696, -12712, -12728, -12744, -12760, 
    -12775, -12791, -12807, -12822, -12838, -12854, -12869, -12885, -12900, -12916, 
    -12931, -12947, -12962, -12977, -12993, -13008, -13023, -13038, -13054, -13069, 
    -13084, -13099, -13114, -13129, -13144, -13159, -13174, -13189, -13204, -13219, 
    -13234, -13249, -13263, -13278, -13293, -13307, -13322, -13337, -13351, -13366, 
    -13380, -13395, -13409, -13424, -13438, -13452, -13467, -13481, -13495, -13510, 
    -13524, -13538, -13552, -13566, -13580, -13594, -13608, -13622, -13636, -13650, 
    -13664, -13678, -13692, -13705, -13719, -13733, -13747, -13760, -13774, -13788, 
    -13801, -13815, -13828, -13842, -13855, -13868, -13882, -13895, -13908, -13922, 
    -13935, -13948, -13961, -13974, -13988, -14001, -14014, -14027, -14040, -14053, 
    -14065, -14078, -14091, -14104, -14117, -14129, -14142, -14155, -14167, -14180, 
    -14193, -14205, -14218, -14230, -14243, -14255, -14267, -14280, -14292, -14304, 
    -14317, -14329, -14341, -14353, -14365, -14377, -14389, -14401, -14413, -14425, 
    -14437, -14449, -14461, -14473, -14484, -14496, -14508, -14519, -14531, -14543, 
    -14554, -14566, -14577, -14589, -14600, -14611, -14623, -14634, -14645, -14657, 
    -14668, -14679, -14690, -14701, -14712, -14723, -14734, -14745, -14756, -14767, 
    -14778, -14789, -14800, -14810, -14821, -14832, -14843, -14853, -14864, -14874, 
    -14885, -14895, -14906, -14916, -14927, -14937, -14947, -14957, -14968, -14978, 
    -14988, -14998, -15008, -15018, -15028, -15038, -15048, -15058, -15068, -15078, 
    -15088, -15098, -15107, -15117, -15127, -15136, -15146, -15156, -15165, -15175, 
    -15184, -15193, -15203, -15212, -15221, -15231, -15240, -15249, -15258, -15267, 
    -15277, -15286, -15295, -15304, -15313, -15322, -15330, -15339, -15348, -15357, 
    -15366, -15374, -15383, -15392, -15400, -15409, -15417, -15426, -15434, -15443, 
    -15451, -15459, -15468, -15476, -15484, -15492, -15500, -15509, -15517, -15525, 
    -15533, -15541, -15549, -15557, -15564, -15572, -15580, -15588, -15596, -15603, 
    -15611, -15618, -15626, -15634, -15641, -15649, -15656, -15663, -15671, -15678, 
    -15685, -15693, -15700, -15707, -15714, -15721, -15728, -15735, -15742, -15749, 
    -15756, -15763, -15770, -15777, -15783, -15790, -15797, -15803, -15810, -15817, 
    -15823, -15830, -15836, -15842, -15849, -15855, -15861, -15868, -15874, -15880, 
    -15886, -15892, -15899, -15905, -15911, -15917, -15923, -15928, -15934, -15940, 
    -15946, -15952, -15957, -15963, -15969, -15974, -15980, -15985, -15991, -15996, 
    -16002, -16007, -16012, -16018, -16023, -16028, -16033, -16039, -16044, -16049, 
    -16054, -16059, -16064, -16069, -16074, -16078, -16083, -16088, -16093, -16097, 
    -16102, -16107, -16111, -16116, -16120, -16125, -16129, -16134, -16138, -16142, 
    -16147, -16151, -16155, -16159, -16163, -16167, -16171, -16175, -16179, -16183, 
    -16187, -16191, -16195, -16199, -16202, -16206, -16210, -16213, -16217, -16221, 
    -16224, -16228, -16231, -16234, -16238, -16241, -16244, -16248, -16251, -16254, 
    -16257, -16260, -16263, -16266, -16269, -16272, -16275, -16278, -16281, -16284, 
    -16286, -16289, -16292, -16294, -16297, -16300, -16302, -16305, -16307, -16309, 
    -16312, -16314, -16316, -16319, -16321, -16323, -16325, -16327, -16329, -16331, 
    -16333, -16335, -16337, -16339, -16341, -16343, -16344, -16346, -16348, -16350, 
    -16351, -16353, -16354, -16356, -16357, -16359, -16360, -16361, -16363, -16364, 
    -16365, -16366, -16367, -16368, -16369, -16370, -16371, -16372, -16373, -16374, 
    -16375, -16376, -16377, -16377, -16378, -16379, -16379, -16380, -16380, -16381, 
    -16381, -16382, -16382, -16382, -16383, -16383, -16383, -16383, -16383, -16383, 
    -16383, -16384, -16383, -16383, -16383, -16383, -16383, -16383, -16383, -16382, 
    -16382, -16382, -16381, -16381, -16380, -16380, -16379, -16379, -16378, -16377, 
    -16377, -16376, -16375, -16374, -16373, -16372, -16371, -16370, -16369, -16368, 
    -16367, -16366, -16365, -16364, -16363, -16361, -16360, -16359, -16357, -16356, 
    -16354, -16353, -16351, -16350, -16348, -16346, -16344, -16343, -16341, -16339, 
    -16337, -16335, -16333, -16331, -16329, -16327, -16325, -16323, -16321, -16319, 
    -16316, -16314, -16312, -16309, -16307, -16305, -16302, -16300, -16297, -16294, 
    -16292, -16289, -16286, -16284, -16281, -16278, -16275, -16272, -16269, -16266, 
    -16263, -16260, -16257, -16254, -16251, -16248, -16244, -16241, -16238, -16234, 
    -16231, -16228, -16224, -16221, -16217, -16213, -16210, -16206, -16202, -16199, 
    -16195, -16191, -16187, -16183, -16179, -16175, -16171, -16167, -16163, -16159, 
    -16155, -16151, -16147, -16142, -16138, -16134, -16129, -16125, -16120, -16116, 
    -16111, -16107, -16102, -16097, -16093, -16088, -16083, -16078, -16074, -16069, 
    -16064, -16059, -16054, -16049, -16044, -16039, -16033, -16028, -16023, -16018, 
    -16012, -16007, -16002, -15996, -15991, -15985, -15980, -15974, -15969, -15963, 
    -15957, -15952, -15946, -15940, -15934, -15928, -15923, -15917, -15911, -15905, 
    -15899, -15892, -15886, -15880, -15874, -15868, -15861, -15855, -15849, -15842, 
    -15836, -15830, -15823, -15817, -15810, -15803, -15797, -15790, -15783, -15777, 
    -15770, -15763, -15756, -15749, -15742, -15735, -15728, -15721, -15714, -15707, 
    -15700, -15693, -15685, -15678, -15671, -15663, -15656, -15649, -15641, -15634, 
    -15626, -15618, -15611, -15603, -15596, -15588, -15580, -15572, -15564, -15557, 
    -15549, -15541, -15533, -15525, -15517, -15509, -15500, -15492, -15484, -15476, 
    -15468, -15459, -15451, -15443, -15434, -15426, -15417, -15409, -15400, -15392, 
    -15383, -15374, -15366, -15357, -15348, -15339, -15330, -15322, -15313, -15304, 
    -15295, -15286, -15277, -15267, -15258, -15249, -15240, -15231, -15221, -15212, 
    -15203, -15193, -15184, -15175, -15165, -15156, -15146, -15136, -15127, -15117, 
    -15107, -15098, -15088, -15078, -15068, -15058, -15048, -15038, -15028, -15018, 
    -15008, -14998, -14988, -14978, -14968, -14957, -14947, -14937, -14927, -14916, 
    -14906, -14895, -14885, -14874, -14864, -14853, -14843, -14832, -14821, -14810, 
    -14800, -14789, -14778, -14767, -14756, -14745, -14734, -14723, -14712, -14701, 
    -14690, -14679, -14668, -14657, -14645, -14634, -14623, -14611, -14600, -14589, 
    -14577, -14566, -14554, -14543, -14531, -14519, -14508, -14496, -14484, -14473, 
    -14461, -14449, -14437, -14425, -14413, -14401, -14389, -14377, -14365, -14353, 
    -14341, -14329, -14317, -14304, -14292, -14280, -14267, -14255, -14243, -14230, 
    -14218, -14205, -14193, -14180, -14167, -14155, -14142, -14129, -14117, -14104, 
    -14091, -14078, -14065, -14053, -14040, -14027, -14014, -14001, -13988, -13974, 
    -13961, -13948, -13935, -13922, -13908, -13895, -13882, -13868, -13855, -13842, 
    -13828, -13815, -13801, -13788, -13774, -13760, -13747, -13733, -13719, -13705, 
    -13692, -13678, -13664, -13650, -13636, -13622, -13608, -13594, -13580, -13566, 
    -13552, -13538, -13524, -13510, -13495, -13481, -13467, -13452, -13438, -13424, 
    -13409, -13395, -13380, -13366, -13351, -13337, -13322, -13307, -13293, -13278, 
    -13263, -13249, -13234, -13219, -13204, -13189, -13174, -13159, -13144, -13129, 
    -13114, -13099, -13084, -13069, -13054, -13038, -13023, -13008, -12993, -12977, 
    -12962, -12947, -12931, -12916, -12900, -12885, -12869, -12854, -12838, -12822, 
    -12807, -12791, -12775, -12760, -12744, -12728, -12712, -12696, -12680, -12665, 
    -12649, -12633, -12617, -12600, -12584, -12568, -12552, -12536, -12520, -12504, 
    -12487, -12471, -12455, -12438, -12422, -12406, -12389, -12373, -12356, -12340, 
    -12323, -12307, -12290, -12273, -12257, -12240, -12223, -12207, -12190, -12173, 
    -12156, -12139, -12122, -12105, -12088, -12072, -12054, -12037, -12020, -12003, 
    -11986, -11969, -11952, -11935, -11917, -11900, -11883, -11866, -11848, -11831, 
    -11813, -11796, -11779, -11761, -11744, -11726, -11708, -11691, -11673, -11656, 
    -11638, -11620, -11602, -11585, -11567, -11549, -11531, -11513, -11496, -11478, 
    -11460, -11442, -11424, -11406, -11388, -11370, -11351, -11333, -11315, -11297, 
    -11279, -11260, -11242, -11224, -11206, -11187, -11169, -11150, -11132, -11114, 
    -11095, -11077, -11058, -11040, -11021, -11002, -10984, -10965, -10946, -10928, 
    -10909, -10890, -10871, -10853, -10834, -10815, -10796, -10777, -10758, -10739, 
    -10720, -10701, -10682, -10663, -10644, -10625, -10606, -10586, -10567, -10548, 
    -10529, -10510, -10490, -10471, -10452, -10432, -10413, -10393, -10374, -10354, 
    -10335, -10315, -10296, -10276, -10257, -10237, -10218, -10198, -10178, -10159, 
    -10139, -10119, -10099, -10079, -10060, -10040, -10020, -10000, -9980, -9960, 
    -9940, -9920, -9900, -9880, -9860, -9840, -9820, -9800, -9780, -9759, 
    -9739, -9719, -9699, -9679, -9658, -9638, -9618, -9597, -9577, -9556, 
    -9536, -9516, -9495, -9475, -9454, -9434, -9413, -9392, -9372, -9351, 
    -9331, -9310, -9289, -9268, -9248, -9227, -9206, -9185, -9165, -9144, 
    -9123, -9102, -9081, -9060, -9039, -9018, -8997, -8976, -8955, -8934, 
    -8913, -8892, -8871, -8850, -8829, -8807, -8786, -8765, -8744, -8722, 
    -8701, -8680, -8658, -8637, -8616, -8594, -8573, -8552, -8530, -8509, 
    -8487, -8466, -8444, -8423, -8401, -8379, -8358, -8336, -8315, -8293, 
    -8271, -8249, -8228, -8206, -8184, -8162, -8141, -8119, -8097, -8075, 
    -8053, -8031, -8009, -7988, -7966, -7944, -7922, -7900, -7878, -7856, 
    -7833, -7811, -7789, -7767, -7745, -7723, -7701, -7678, -7656, -7634, 
    -7612, -7590, -7567, -7545, -7523, -7500, -7478, -7456, -7433, -7411, 
    -7388, -7366, -7343, -7321, -7299, -7276, -7253, -7231, -7208, -7186, 
    -7163, -7141, -7118, -7095, -7073, -7050, -7027, -7005, -6982, -6959, 
    -6936, -6914, -6891, -6868, -6845, -6822, -6799, -6777, -6754, -6731, 
    -6708, -6685, -6662, -6639, -6616, -6593, -6570, -6547, -6524, -6501, 
    -6478, -6455, -6432, -6408, -6385, -6362, -6339, -6316, -6293, -6269, 
    -6246, -6223, -6200, -6176, -6153, -6130, -6106, -6083, -6060, -6036, 
    -6013, -5990, -5966, -5943, -5919, -5896, -5873, -5849, -5826, -5802, 
    -5779, -5755, -5732, -5708, -5684, -5661, -5637, -5614, -5590, -5566, 
    -5543, -5519, -5495, -5472, -5448, -5424, -5401, -5377, -5353, -5329, 
    -5306, -5282, -5258, -5234, -5210, -5187, -5163, -5139, -5115, -5091, 
    -5067, -5043, -5019, -4995, -4972, -4948, -4924, -4900, -4876, -4852, 
    -4828, -4804, -4780, -4756, -4731, -4707, -4683, -4659, -4635, -4611, 
    -4587, -4563, -4539, -4514, -4490, -4466, -4442, -4418, -4394, -4369, 
    -4345, -4321, -4297, -4272, -4248, -4224, -4200, -4175, -4151, -4127, 
    -4102, -4078, -4054, -4029, -4005, -3980, -3956, -3932, -3907, -3883, 
    -3858, -3834, -3810, -3785, -3761, -3736, -3712, -3687, -3663, -3638, 
    -3614, -3589, -3565, -3540, -3516, -3491, -3467, -3442, -3417, -3393, 
    -3368, -3344, -3319, -3294, -3270, -3245, -3221, -3196, -3171, -3147, 
    -3122, -3097, -3073, -3048, -3023, -2998, -2974, -2949, -2924, -2900, 
    -2875, -2850, -2825, -2801, -2776, -2751, -2726, -2701, -2677, -2652, 
    -2627, -2602, -2577, -2553, -2528, -2503, -2478, -2453, -2428, -2404, 
    -2379, -2354, -2329, -2304, -2279, -2254, -2229, -2204, -2180, -2155, 
    -2130, -2105, -2080, -2055, -2030, -2005, -1980, -1955, -1930, -1905, 
    -1880, -1855, -1830, -1805, -1780, -1755, -1730, -1705, -1680, -1655, 
    -1630, -1605, -1580, -1555, -1530, -1505, -1480, -1455, -1430, -1405, 
    -1380, -1355, -1330, -1305, -1280, -1255, -1230, -1205, -1180, -1155, 
    -1130, -1105, -1079, -1054, -1029, -1004, -979, -954, -929, -904, 
    -879, -854, -829, -803, -778, -753, -728, -703, -678, -653, 
    -628, -603, -577, -552, -527, -502, -477, -452, -427, -402, 
    -376, -351, -326, -301, -276, -251, -226, -201, -175, -150, 
    -125, -100, -75, -50, -25
};


void inverse_rotate_vector(Matrix3 *mat, Vector3* vertex, Vector3* trans)
{
    trans->x = (mat->_11 * vertex->x +
                mat->_21 * vertex->y +
                mat->_31 * vertex->z) >> ACCURACY;

    trans->y = (mat->_12 * vertex->x + 
                mat->_22 * vertex->y +
                mat->_32 * vertex->z) >> ACCURACY;

    trans->z = (mat->_13 * vertex->x +
                mat->_23 * vertex->y + 
                mat->_33 * vertex->z) >> ACCURACY;

}

void rotate_vector(Matrix3 *mat, Vector3* vertex, Vector3* trans)
{
    trans->x = (mat->_11 * vertex->x +
                mat->_12 * vertex->y +
                mat->_13 * vertex->z) >> ACCURACY;

    trans->y = (mat->_21 * vertex->x + 
                mat->_22 * vertex->y +
                mat->_23 * vertex->z) >> ACCURACY;

    trans->z = (mat->_31 * vertex->x +
                mat->_32 * vertex->y + 
                mat->_33 * vertex->z) >> ACCURACY;
}

void rotate_vertex(Matrix3 *mat, Point3* vertex)
{
    vertex->tx  = (mat->_11 * vertex->x +
                   mat->_12 * vertex->y +
                   mat->_13 * vertex->z) >> ACCURACY;

    vertex->ty  = (mat->_21 * vertex->x +
                   mat->_22 * vertex->y +
                   mat->_23 * vertex->z) >> ACCURACY;

    vertex->tz  = (mat->_31 * vertex->x +
                   mat->_32 * vertex->y +
                   mat->_33 * vertex->z) >> ACCURACY;
}

void inverse_rotate_vertex(Matrix3 *mat, Point3* vertex)
{
    vertex->tx  = (mat->_11 * vertex->x +
                   mat->_21 * vertex->y +
                   mat->_31 * vertex->z) >> ACCURACY;

    vertex->ty  = (mat->_12 * vertex->x +
                   mat->_22 * vertex->y +
                   mat->_32 * vertex->z) >> ACCURACY;

    vertex->tz  = (mat->_13 * vertex->x +
                   mat->_23 * vertex->y +
                   mat->_33 * vertex->z) >> ACCURACY;
}


int v_rot_v(Matrix3 *mat, Point3* vertex, int radius)
{
    int  x,y,z;
    int a,b,c;

    a = vertex->x >> 3;
    b = vertex->y >> 3;
    c = vertex->z >> 3;
  
    z  = mat->_31 * a;
    z += mat->_32 * b;
    z += mat->_33 * c;
    z  = z >> (ACCURACY - 3);

    if (z > -radius) 
    {
        if ((z >> (ACCURACY+6)) < 256) { // ??
            z  = mat->_31 * vertex->x;
            z += mat->_32 * vertex->y;
            z += mat->_33 * vertex->z;
            x  = mat->_11 * vertex->x;
            x += mat->_12 * vertex->y;
            x += mat->_13 * vertex->z;
            y  = mat->_21 * vertex->x;
            y += mat->_22 * vertex->y;
            y += mat->_23 * vertex->z;

            vertex->tx = (int)(x >> ACCURACY);
            vertex->ty = (int)(y >> ACCURACY);
            vertex->tz = (int)(z >> ACCURACY);
            return TRUE;
        } 
        else
        {
            x  = mat->_11 * a;
            x += mat->_12 * b;
            x += mat->_13 * c;
            y  = mat->_21 * a;
            y += mat->_22 * b;
            y += mat->_23 * c;

            vertex->tx = (int)(x >> (ACCURACY - 3));
            vertex->ty = (int)(y >> (ACCURACY - 3));
            vertex->tz = z;
            return TRUE;
        }
    }
    return FALSE;
}

void rotate_vertices(Matrix3 *mat, Point3* vertex, int num_vertices)
{
    int n; 
  
    for (n = num_vertices; n; n--) 
    {
        vertex->tx = (mat->_11 * vertex->x +
                      mat->_12 * vertex->y +
                      mat->_13 * vertex->z)   >> ACCURACY;

        vertex->ty = (mat->_21 * vertex->x +
                      mat->_22 * vertex->y +
                      mat->_23 * vertex->z) >> ACCURACY;

        vertex->tz = (mat->_31 * vertex->x +
                      mat->_32 * vertex->y +
                      mat->_33 * vertex->z) >> ACCURACY;
        vertex++;
    }
}

void init_matrices(Model *m)
{
    create_matrix (&m->orientat, 0, 0, 0);
    create_matrix (&m->offset  , 0, 0, 0);
}


void matrix_product(Matrix3 *a, Matrix3 *b, Matrix3 *prod)
{   
    long e11,e12,e13,e21,e22,e23,e31,e32,e33;

    e11 = (ROUNDING + a->_11 * b->_11 + a->_12 * b->_21 + a->_13 * b->_31)
        >> ACCURACY;
    e12 = (ROUNDING +a->_11 * b->_12 + a->_12 * b->_22 + a->_13 * b->_32) 
        >> ACCURACY;
    e13 = (ROUNDING +a->_11 * b->_13 + a->_12 * b->_23 + a->_13 * b->_33) 
        >> ACCURACY;

    e21 = (ROUNDING +a->_21 * b->_11 + a->_22 * b->_21 + a->_23 * b->_31) 
        >> ACCURACY;
    e22 = (ROUNDING +a->_21 * b->_12 + a->_22 * b->_22 + a->_23 * b->_32) 
        >> ACCURACY;
    e23 = (ROUNDING +a->_21 * b->_13 + a->_22 * b->_23 + a->_23 * b->_33) 
        >> ACCURACY;

    e31 = (ROUNDING +a->_31 * b->_11 + a->_32 * b->_21 + a->_33 * b->_31) 
        >> ACCURACY;
    e32 = (ROUNDING +a->_31 * b->_12 + a->_32 * b->_22 + a->_33 * b->_32)
        >> ACCURACY;
    e33 = (ROUNDING +a->_31 * b->_13 + a->_32 * b->_23 + a->_33 * b->_33)
        >> ACCURACY;

    prod->_11 = e11;
    prod->_12 = e12;
    prod->_13 = e13;
    prod->_21 = e21;
    prod->_22 = e22;
    prod->_23 = e23;
    prod->_31 = e31;
    prod->_32 = e32;
    prod->_33 = e33;
                                            
}
                         
#define FIX_MUL(x, y) ((x * y + ROUNDING) >> ACCURACY)       
                                             
void create_matrix(Matrix3* mat, int ax, int ay, int az)
{
    /*  Set up rotation matrix with angles ax, ay, az   */

    long sx,sy,sz;                 /* sines of the angles */
    long cx,cy,cz;                 /* cos angles          */

    long sxsy, sxcy, czsx; 

    if (ax < 0) ax += TABLE_SIZE;
    if (ay < 0) ay += TABLE_SIZE;
    if (az < 0) az += TABLE_SIZE;
    /* get sine values from table */
    sx = SinTable[ax];
    sy = SinTable[ay];
    sz = SinTable[az];

    ax -= ((TABLE_SIZE/4) * 3); 
    if (ax < 0) ax += TABLE_SIZE;
    ay -= ((TABLE_SIZE/4) * 3);
    if (ay < 0) ay += TABLE_SIZE;
    az -= ((TABLE_SIZE/4) * 3);
    if (az < 0) az += TABLE_SIZE;
    /* get cosine values */
    cx = SinTable[ax];
    cy = SinTable[ay];
    cz = SinTable[az];

    sxsy = FIX_MUL(sx, sy); 
    sxcy = FIX_MUL(sx, cy);
    czsx = FIX_MUL(cz, sx);

    mat->_11  =  (int) ((cz * cy + sxsy * sz + ROUNDING) >> ACCURACY);
    mat->_12  =  (int)  FIX_MUL(sz, cx); 
    mat->_13  =  (int) ((sxcy * sz - cz * sy + ROUNDING) >> ACCURACY);

    mat->_21  =  (int) ((czsx * sy - sz * cy + ROUNDING) >> ACCURACY);
    mat->_22  =  (int)  FIX_MUL(cz, cx);
    mat->_23  =  (int) ((czsx * cy + sz * sy + ROUNDING) >> ACCURACY);

    mat->_31  =  (int)  FIX_MUL(cx, sy);
    mat->_32  =  (int) -sx;
    mat->_33  =  (int)  FIX_MUL(cx, cy);
}  

void create_inverse(Matrix3 *a, Matrix3 *b)
{
    b->_11 = a->_11;
    b->_12 = a->_21;
    b->_13 = a->_31;

    b->_21 = a->_12;
    b->_22 = a->_22;
    b->_23 = a->_32;

    b->_31 = a->_13;
    b->_32 = a->_23;
    b->_33 = a->_33;
}

int magnitude(Vector3 *vect)
{
    long x,y,z;
                       
    x = vect->x >> 8;
    y = vect->y >> 8;
    z = vect->z >> 8;
    return isqrt(x*x + y*y + z*z);
}

void normalise8(Vector3 *vect)
{
    int mod;
    long x,y,z;
    int nx, ny, nz;

    x = vect->x;
    y = vect->y;
    z = vect->z;
    if (nx = (x < 0)) x = -x;
    if (ny = (y < 0)) y = -y;
    if (nz = (z < 0)) z = -z;

    // reduce to 8 bits each
    while ((x | y | z) & ~((1<<8)-1))
    {
        x >>= 1;
        y >>= 1;
        z >>= 1;
    }

    if (nx) x = -x;
    if (ny) y = -y;
    if (nz) z = -z;
    
    mod = isqrt(x*x + y*y + z*z) + 1;
    vect->x = (x << 7) / mod;
    vect->y = (y << 7) / mod;
    vect->z = (z << 7) / mod;
}

void normalise_matrix(Matrix3 *m)
{
    int mod;
    long x,y,z;
                       
    x = m->_11;
    y = m->_21;
    z = m->_31;
    mod = isqrt(x*x + y*y + z*z);
    if (mod < 1) mod = 1;
    m->_11 = (x << ACCURACY) / mod;
    m->_21 = (y << ACCURACY) / mod;
    m->_31 = (z << ACCURACY) / mod;

    x = m->_12;
    y = m->_22;
    z = m->_32;
    mod = isqrt(x*x + y*y + z*z);
    if (mod < 1) mod = 1;
    m->_12 = (x << ACCURACY) / mod;
    m->_22 = (y << ACCURACY) / mod;
    m->_32 = (z << ACCURACY) / mod;

    x = m->_13;
    y = m->_23;
    z = m->_33;
    mod = isqrt(x*x + y*y + z*z);
    if (mod < 1) mod = 1;
    m->_13 = (x << ACCURACY) / mod;
    m->_23 = (y << ACCURACY) / mod;
    m->_33 = (z << ACCURACY) / mod;
}

void set_model_offset(Model *m, int t, int a, int i)
{
    create_matrix(&m->offset, t, a, i);                              
}                                                   
